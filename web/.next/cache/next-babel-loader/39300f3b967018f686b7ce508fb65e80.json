{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { useRef, useState, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nexport default function useMeasure() {\n  var ref = useRef();\n\n  var _useState = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  }),\n      bounds = _useState[0],\n      set = _useState[1];\n\n  var _useState2 = useState(function () {\n    return new ResizeObserver(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          entry = _ref2[0];\n\n      return set(entry.contentRect);\n    });\n  }),\n      ro = _useState2[0];\n\n  useEffect(function () {\n    return ro.observe(ref.current), ro.disconnect;\n  }, []);\n  return [{\n    ref: ref\n  }, bounds];\n}","map":{"version":3,"sources":["/Users/philipppolder/Dropbox/Projekte/Kate Jackling/Local Root/kate-jackling/web/utils/hooks/useMeasure.js"],"names":["useRef","useState","useEffect","ResizeObserver","useMeasure","ref","left","top","width","height","bounds","set","entry","contentRect","ro","observe","current","disconnect"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,eAAe,SAASC,UAAT,GAAsB;AACpC,MAAMC,GAAG,GAAGL,MAAM,EAAlB;;AADoC,kBAEdC,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAhB;AAAmBC,IAAAA,KAAK,EAAE,CAA1B;AAA6BC,IAAAA,MAAM,EAAE;AAArC,GAAD,CAFM;AAAA,MAE7BC,MAF6B;AAAA,MAErBC,GAFqB;;AAAA,mBAGvBV,QAAQ,CAAC;AAAA,WAAM,IAAIE,cAAJ,CAAmB;AAAA;AAAA,UAAES,KAAF;;AAAA,aAAaD,GAAG,CAACC,KAAK,CAACC,WAAP,CAAhB;AAAA,KAAnB,CAAN;AAAA,GAAD,CAHe;AAAA,MAG7BC,EAH6B;;AAIpCZ,EAAAA,SAAS,CAAC;AAAA,WAAOY,EAAE,CAACC,OAAH,CAAWV,GAAG,CAACW,OAAf,GAAyBF,EAAE,CAACG,UAAnC;AAAA,GAAD,EAAiD,EAAjD,CAAT;AACA,SAAO,CAAC;AAAEZ,IAAAA,GAAG,EAAHA;AAAF,GAAD,EAAUK,MAAV,CAAP;AACA","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nexport default function useMeasure() {\n\tconst ref = useRef();\n\tconst [bounds, set] = useState({ left: 0, top: 0, width: 0, height: 0 });\n\tconst [ro] = useState(() => new ResizeObserver(([entry]) => set(entry.contentRect)));\n\tuseEffect(() => (ro.observe(ref.current), ro.disconnect), []);\n\treturn [{ ref }, bounds];\n}\n"]},"metadata":{},"sourceType":"module"}