{"ast":null,"code":"import { useState, useEffect } from \"react\";\nexport default function useWindowSize() {\n  const isClient = false;\n\n  function getSize() {\n    return {\n      width: isClient ? window.innerWidth : undefined,\n      height: isClient ? window.innerHeight : undefined\n    };\n  }\n\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return false;\n    }\n\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return windowSize;\n}","map":{"version":3,"sources":["/Users/philipppolder/Dropbox/Projekte/Kate Jackling/Local Root/kate-jackling/web/utils/hooks/useWindowSize.js"],"names":["useState","useEffect","useWindowSize","isClient","getSize","width","window","innerWidth","undefined","height","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,aAAT,GAAyB;AACvC,QAAMC,QAAQ,QAAd;;AAEA,WAASC,OAAT,GAAmB;AAClB,WAAO;AACNC,MAAAA,KAAK,EAAEF,QAAQ,GAAGG,MAAM,CAACC,UAAV,GAAuBC,SADhC;AAENC,MAAAA,MAAM,EAAEN,QAAQ,GAAGG,MAAM,CAACI,WAAV,GAAwBF;AAFlC,KAAP;AAIA;;AAED,QAAM;AAAA,OAACG,UAAD;AAAA,OAAaC;AAAb,MAA8BZ,QAAQ,CAACI,OAAD,CAA5C;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACf,QAAI,CAACE,QAAL,EAAe;AACd,aAAO,KAAP;AACA;;AAED,aAASU,YAAT,GAAwB;AACvBD,MAAAA,aAAa,CAACR,OAAO,EAAR,CAAb;AACA;;AAEDE,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,WAAO,MAAMP,MAAM,CAACS,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC,CAAb;AACA,GAXQ,EAWN,EAXM,CAAT,CAZuC,CAuB/B;;AAER,SAAOF,UAAP;AACA","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function useWindowSize() {\n\tconst isClient = typeof window === \"object\";\n\n\tfunction getSize() {\n\t\treturn {\n\t\t\twidth: isClient ? window.innerWidth : undefined,\n\t\t\theight: isClient ? window.innerHeight : undefined\n\t\t};\n\t}\n\n\tconst [windowSize, setWindowSize] = useState(getSize);\n\n\tuseEffect(() => {\n\t\tif (!isClient) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction handleResize() {\n\t\t\tsetWindowSize(getSize());\n\t\t}\n\n\t\twindow.addEventListener(\"resize\", handleResize);\n\t\treturn () => window.removeEventListener(\"resize\", handleResize);\n\t}, []); // Empty array ensures that effect is only run on mount and unmount\n\n\treturn windowSize;\n}\n"]},"metadata":{},"sourceType":"module"}